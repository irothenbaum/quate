@use "layout";
@use "variables";

@mixin drop-shadow($amount: 4px, $opacity: 0.1) {
  box-shadow: 0 calc($amount/3) $amount rgba(0, 0, 0, $opacity);
}

@mixin hero-center {
  height: 100%;
  width: 100%;
  display: flex;
  flex: 1;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

@mixin flex-row($gap: var(--space-md)) {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
  flex-direction: row;
  gap: $gap;
}

@mixin flex-column($gap: var(--space-md)) {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: flex-start;
  flex-direction: column;
  gap: $gap;
}

@mixin overlay() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin dialog-content() {
  width: var(--screen-small-max);
  max-width: 80vw;
}

@mixin no-text-select() {
    -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Chrome/Safari/Opera */
    -khtml-user-select: none; /* Konqueror HTML */
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* Internet Explorer/Edge */
    user-select: none; /* Non-prefixed version, currently supported by Chrome, Edge, Opera, and Firefox */
}

@mixin hud-section {
  height: 100%;
  width: 100%;
  flex: 1;
  position: relative;
  @include flex-row(0);

  .container-inner {
    background-color: var(--color-world-shade);
    height: 100%;
    width: 100%;
    position: relative;
    @include flex-column(0);
    justify-content: center;
    padding: var(--space-md);

    @include layout.small-and-below() {
      padding: var(--space-sm);
    }
  }

  &:first-child .container-inner {
    border-radius: var(--border-radius-md) 0 0 var(--border-radius-md);
  }

  &:last-child .container-inner {
    border-radius: 0 var(--border-radius-md) var(--border-radius-md) 0;
  }
}


// Helper function: cumulative percentage at a given index
@function cumulative-perc($list, $index) {
  $sum: 0;
  $i: 1;
  @each $item in $list {
    @if $i <= $index {
      $sum: $sum + $item;
    }
    $i: $i + 1;
  }
  @return ($sum / variables.$transitionTotalSpeed) * 100%;
}

$transitionTimings: (
  variables.$transitionStepSpeed,
  variables.$transitionResultsSpeed,
  variables.$transitionStepSpeed
);


@mixin proportional-keyframes($name, $steps) {
  $len: length($transitionTimings);

  @if $len != length($steps) - 1 {
    @error "Timings and steps must have the same length.";
  }

  @keyframes #{$name} {
    0% {
      @each $prop, $val in nth($steps, 1) {
        #{$prop}: #{$val};
      }
    }

    @for $i from 2 through $len + 1 {
      #{cumulative-perc($transitionTimings, $i - 1)} {
        @each $prop, $val in nth($steps, $i) {
          #{$prop}: #{$val};
        }
      }
    }
  }
}

@mixin transition-animation($name, $start, $stop) {
  @include proportional-keyframes($name, (
    $start,
    $stop,
    $stop,
    $start
  ));
}
